Нишки
1.Определение-многонишкова програма MULTITHREADED(може да изпълнява едновременно няколко 
редици от програмни инструкции)
-thread (нишка) - редица от програмни инструкции 
-те са част от процеса и споделят неговите ресурси
-изпълнението на нишките напомня на изпълнението на няколко програми едноврменно
-последователност от програмни инструкции,които са част от процеса и могат да се изпълняват 
едновременно

защо да използваме нишки?
-позволяват изпълнението на няколко операции едновременно
-максимализират полезната употреба на ресурсите на процесора(позволява на програмата да използва
всичките ядра)
-намалява времето за изпълнение (не е нжно да чакаме една операция  приключи,
за да започне друга)
-за да могат да бъдат използвани процесорните ядра за изпълнение на различни действия по 
едно и също време          
-за подобряване на функционалността на приложенията

създаване на нишки

using System.Threading
Thread thread = new Thread(threadMethod)
thread.Start();

2.Видове нишки (Main Thread)
-нишката на главния метод , с която се стартира и изпълнява стандартно програмата
-нишка на преден план (foreground thread) , която остава активна до приключване на работата си, дори когато
главната нишка е приключила с изпълнението си. Thread обектът по подразбиране е foreground thread;
-нишка на зададен план (нишка във фонов жим/background thread) , която прекратява работата си най-късно, когато 
и главната нишка я прекрати. За да направите една нишка във фонов тржим, трябва да зададете свойство на обекта
на нишката : thread.IsBackground = true;

3.Жизнен цикъл на нишките 
Нишка в незапочнато състояние : когато в създаден обект от Thread класа, той се намира в незапочнато състояние,
което ще рече, че нишката още не е започнала изпълнението си. С прости думо: не е извикан Start() метода.

Подлежаща на изпълнение нишка: Нишка, която е готова да се изпълни се прехвърля в Runeable състояние.
В това състояние, нишката дори е възможнп да се изпълнява или е възможнп да се изпълни във всеки един момент.
Отговорност 

състояние на изпълнение(Running) - обработва/изпълнява се от CPU

състояние на неизпълнение (Not running) 
поради :
-Sleep()
-Wait()
-I/O(входно/изходна) заявка
-Suspend()

мъртво състояние - 